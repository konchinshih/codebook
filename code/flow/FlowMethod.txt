// Author: CRyptoGRapheR
Maximize c^T x subject to Ax ≤ b, x ≥ 0;
with the corresponding symmetric dual problem,
Minimize b^T y subject to A^T y ≥ c, y ≥ 0.

Maximize c^T x subject to Ax ≤ b;
with the corresponding asymmetric dual problem,
Minimize b^T y subject to A^T y = c, y ≥ 0.

Maximize \sum x subject to x_i + x_j ≤ Aij, x ≥ 0;
=> Maximize \sum x subject to x_i + x_j ≤ A_ij;
=> Minimize A^T y = \sum A_ij y_ij subject to for all v, \sum_{i=v or j=v} y_ij = 1, y_ij ≥ 0
=> possible optimal solution: y_ij = {0, 0.5, 1}
=> y'=2y: \sum_{i=v or j=v} y'_ij = 2, y'_ij = {0, 1, 2}
=> Minimum Bipartite perfect matching/2 (V1=X,V2=X,E=A)

General Graph:
|Max Ind. Set| + |Min Vertex Cover| = |V|
|Max Ind. Edge Set| + |Min Edge Cover| = |V|
Bipartite Graph:
|Max Ind. Set| = |Min Edge Cover|
|Max Ind. Edge Set| = |Min Vertex Cover|

To reconstruct the minimum vertex cover, dfs from each
unmatched vertex on the left side and with unused edges
only. Equivalently, dfs from source with unused edges
only and without visiting sink. Then, a vertex is
chosen iff. it is on the left side and without visited
or on the right side and visited through dfs.

Minimum Weighted Bipartite Edge Cover:
Construct new bipartite graph with n+m vertices on each side:
for each vertex u, duplicate a vertex u' on the other side
for each edge (u,v,w), add edges (u,v,w) and (v',u',w)
for each vertex u, add edge (u,u',2w) where w is min edge connects to u
then the answer is the minimum perfect matching of the new graph (KM)

Maximum density subgraph ( \sum{W_e}+ \sum{W_v} ) / |V|
Binary search on answer:
For a fixed D, construct a Max flow model as follow:
Let S be Sum of all weight( or inf)
1. from source to each node with cap = S
2. For each (u,v,w) in E, (u->v,cap=w), (v->u,cap=w)
3. For each node v, from v to sink with cap = S + 2 * D - deg[v] - 2 * (W of v)
where deg[v] = \sum weight of edge associated with v
If maxflow < S * |V|, D is an answer.

Requiring subgraph: all vertex can be reached from source with
edge whose cap > 0.

Maximum closed subgraph
1. connect source with positive weighted vertex(capacity=weight)
2. connect sink with negitive weighted vertex(capacity=-weight)
3. make capacity of the original edges = inf
4. ans = sum(positive weighted vertex weight) - (max flow)

(Node-disjoint) Min DAG Path Cover（用最少路徑覆蓋所有點）
Node disjoint: 拆出來的路徑不能共用同一個點
將一個點 u 裂成 u+ 和 u-，代表進入和出去
對於一條邊 (u, v) 建邊 u- => v+
1. +點們和 -點們形成一張二分圖
2. 最差的答案是 n，代表每個點自己一個點就是一條路徑
3. 只要一組 (u-, v+) 匹配成功那對應到的答案恰好會 -1
>>> ans = n - 這張二分圖的最大匹配

General DAG Path Cover
跟 Node-disjoint 版本差在點可以被很多條路共用
建邊方式 Node-disjoint 差別在條件比較鬆
Node-disjoint: u- => v+ 只能在 (u, v) 有邊時建
      General: u- => v+ 在 u 能走到 v 的時候就建

Dilworth Theorem
反鏈：一些節點的集合，滿足這些節點互相無法抵達
最大反鏈 = 最小 General DAG Path Cover
